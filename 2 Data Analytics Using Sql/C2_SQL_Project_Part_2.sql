/* sprint-10_project task-1 */

use modelcarsdb;


/* task-1.1 find the total number of employees */

select count(*) as total_employees
from employees;

/* task-1.2 list all employees with their basic information */

select employeenumber, lastname, firstname, email, jobtitle
from employees;

/* task-1.3 count the number of employees holding each job title. */

select jobtitle, count(*) as employee_count
from employees
group by jobtitle;

/* task-1.4 find the employees who don't have a manager (reportsto is null). */

select employeenumber, lastname, firstname
from employees
where reportsto is null;

/* task-1.5 calculate total sales generated by each sales representative */
-- select * from employees;

select employeeNumber, concat(lastName, ', ', firstName) as sales_rep, sum(total_amount) as total_sales
from employees 
left join customers  on employees.employeeNumber = customers.salesRepEmployeeNumber
left join orders  on customers.customerNumber = orders.customerNumber
group by employeeNumber, concat(lastName, ', ', firstName)
order by total_sales desc;

/* task-1.6 find the most profitable sales representative based on total sales. */
-- select * from employees;

select lastname as sales_rep_name, firstname as sales_rep_firstname,
sum(quantityordered * priceeach) as total_sales from employees 
join customers  on employees .employeenumber = customers.salesrepemployeenumber
join orders using(customernumber)
join orderdetails using (ordernumber)
group by employeenumber, lastname, firstname
order by total_sales desc
limit 1;

/* task-1.7 find the names of all employees who have sold more than the average sales amount for their office */

select lastname as employee_lastname, firstname as employee_firstname, officecode,
sum(quantityordered * priceeach) as total_sales from employees 
join customers on employees.employeenumber = customers.salesrepemployeenumber
join orders using (customernumber)
join orderdetails using (ordernumber) 
group by employeenumber, lastname, firstname, officecode
having sum(quantityordered * priceeach) > (select avg(office_sales)
from (select officecode, sum(quantityordered * priceeach) as office_sales from employees 
join customers on employees .employeenumber = customers.salesrepemployeenumber
join orders using (customernumber)
join orderdetails using (ordernumber) group by officecode ) avg_sales
where avg_sales.officecode = officecode)order by total_sales desc;

/* sprint-10_project task-2 */

desc products;

/* task-2.1 find the average order amount for each customer */
-- select * from customers;
-- select * from orders;

select customerNumber, avg(total_amount) as averageOrderAmount from orders
group by customerNumber;

/* task-2.2 find the number of orders placed in each month */

select month(orderdate) as month, count(*) as order_count from orders
group by month(orderdate);

/* task-2.3 identify orders that are still pending shipment (status = 'pending') */

select orderNumber, orderDate, requiredDate
from orders where status = 'Pending';

/* task-2.4 list orders along with customer details */

select orderNumber, orderDate, requiredDate, shippedDate, status, total_amount, customerName, contactLastName, contactFirstName
from orders 
join customers using (customerNumber);

/* task-2.5 retrieve the most recent orders (based on order date) */

select ordernumber, orderdate, requireddate, shippeddate,
status, comments, customernumber, total_amount from orders
order by orderdate desc
limit 10; 

/* task-2.6 calculate total sales for each order. */

select orderNumber, sum(quantityOrdered * priceEach) as totalSales
from orderDetails
group by orderNumber;

/* task-2.7 find the highest-value order based on total sales. */

select ordernumber, sum(quantityordered * priceeach) as totalsales
from orders 
join orderdetails using (ordernumber)
group by ordernumber
order by totalsales desc
limit 1;

/* task-2.8 list all orders with their corresponding order details. */

select ordernumber, orderdate, requireddate, shippeddate, status, comments,
customernumber, productcode, quantityordered, priceeach, orderlinenumber
from orders 
join orderdetails using (ordernumber)
order by ordernumber, orderlinenumber;

/* task-2.9 list the most frequently ordered products */

select productname, productcode, count(ordernumber) as ordercount
from products 
join orderdetails using (productcode)
group by productcode, productname
order by ordercount desc;

/* task-2.10 calculate total revenue for each order */

select ordernumber, sum(quantityordered * priceeach) as totalrevenue
from orders 
join orderdetails using (ordernumber) 
group by ordernumber
order by totalrevenue desc; 

/* task-2.11 identify the most profitable orders based on total revenue */

select ordernumber, sum(quantityordered * priceeach) as totalrevenue
from orders 
join orderdetails using (ordernumber) 
group by ordernumber
order by totalrevenue desc
limit 1;

/* task-2.12 list all orders with detailed product information */

select ordernumber, orderdate, requireddate, shippeddate, status, comments, customernumber, productcode,  
productname, productline, productscale, productvendor, productdescription, quantityordered, priceeach, orderlinenumber
from orders 
join orderdetails using (ordernumber)
join products using (productcode)
order by ordernumber, orderlinenumber;

/* task-2.13 identify orders with delayed shipping (shippeddate > requireddate). */

select ordernumber, orderdate, requireddate, shippeddate, status, comments, customernumber
from orders
where shippeddate > requireddate and shippeddate is not null;  

/* task-2.14 find the most popular product combinations within orders */
-- select * from orderdetails;
-- select * from products;
select productname as product, productname as product, count(*) as combinationcount
from orderdetails 
join products  using (productcode) 
where productcode = productcode 
group by productname, productname
order by combinationcount desc
limit 10;

/* task-2.15 calculate revenue for each order and identify the top 10 most profitable. */

select ordernumber, sum(quantityordered * priceeach) as revenue
from orders 
join orderdetails using (ordernumber)
group by ordernumber
order by revenue desc
limit 10;


/* task-2.16 create a trigger that automatically updates a customer's credit limit after a new order is placed,
 reducing it by the order total. */

delimiter //

create trigger updatecreditlimitafterorder after insert on orders
for each row
begin
    update customers
    set creditlimit = creditlimit - new.total_amount
    where customernumber = new.customernumber;
end //

delimiter ;

/* task-2.17 create a trigger that logs product quantity changes whenever an order detail is inserted or updated. */

 delimiter //
 create trigger log_product_quantity_changes
after insert on orderdetails
for each row
begin
  insert into product_quantity_logs (productcode, quantitychange)
  values (new.productcode, new.quantityordered);
end
//
delimiter ;


